# Mau Reacode Iya!!!
# https://github.com/fikriganteng-XD
# Time : Mon Oct  3 16:52:01 2022
# -------------------------------
_ = lambda __ : __import__('marshal').loads(__import__('base64').b64decode(__[::-1]));exec((_)(b'='))